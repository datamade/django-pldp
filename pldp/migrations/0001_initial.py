# Generated by Django 2.1.5 on 2019-02-14 14:40

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('languages_plus', '0004_auto_20171214_0004'),
        ('countries_plus', '0005_auto_20160224_1804'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Full name of the agency that is conducting/posting the study.', max_length=1000)),
                ('department', models.CharField(blank=True, help_text='Specific department within the agency that is responsible for the study. Leave blank, if no such specification is necessary.', max_length=1000)),
                ('phone', models.CharField(blank=True, help_text='Direct single voice telephone number for the specified agency.', max_length=100)),
                ('email', models.EmailField(help_text="Single valid email address actively monitored by the agency's reception or inquiry desk.", max_length=254)),
                ('type', models.CharField(blank=True, choices=[('governmental agency', 'governmental agency'), ('municipal agency', 'municipal agency'), ('non profit corporation', 'non profit corporation'), ('business corporation', 'business corporation'), ('community organisation', 'community organisation'), ('educational institute', 'educational institute'), ('private individual', 'private individual')], help_text='Character of the type of agency that is conducting/posting the study.', max_length=255)),
                ('language', models.ForeignKey(blank=True, help_text='Main language used by the agency posting the study.', null=True, on_delete=django.db.models.deletion.CASCADE, to='languages_plus.Language')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('region', models.CharField(blank=True, help_text='State, county, or municipal boundary of the location.', max_length=1000)),
                ('city', models.CharField(blank=True, help_text='Name of the city that the survey location is based within. Leave blank if the survey location is not based within a city.', max_length=1000)),
                ('type', models.CharField(blank=True, choices=[('line', 'line'), ('area', 'area')], help_text='Indication of whether the location is intended for counts of people moving (across a line), or whether it is intended for counts of people staying (within an area).', max_length=4)),
                ('primary_name', models.CharField(help_text='Official, specific name of the survey location.', max_length=1000)),
                ('secondary_name', models.CharField(blank=True, help_text='Secondary or specifying name of the survey location. Leave blank if no specification is necessary.', max_length=1000)),
                ('subdivision', models.CharField(blank=True, choices=[('north', 'north'), ('northeast', 'northeast'), ('east', 'east'), ('southeast', 'southeast'), ('south', 'south'), ('southwest', 'southwest'), ('west', 'west'), ('northwest', 'northwest'), ('center', 'center')], help_text='Line Geometry: indication of whether the line is a subdivision of a single survey location. Area Geometry: indication of whether an area is a subdivision of a single survey location.', max_length=9)),
                ('character', models.CharField(blank=True, choices=[('commercial', 'Commercial'), ('cbd', 'Central business district'), ('civic', 'Civic'), ('cultural', 'Cultural'), ('educational', 'Educational'), ('industrial', 'Industrial'), ('infrastructural', 'Infrastructural'), ('medical', 'Medical'), ('mixed', 'Mixed'), ('office', 'Office'), ('recreational', 'Recreational'), ('residential', 'Residential'), ('rural', 'Rural'), ('stadium', 'Stadium')], help_text="Primary character of the survey location's immediate surroundings.", max_length=15)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Agency')),
            ],
        ),
        migrations.CreateModel(
            name='LocationArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('date_measured', models.DateField(help_text='Date that the location_area attributes were measured.')),
                ('total_sqm', models.FloatField(blank=True, help_text='Total area of the space defined by the area geometry', null=True)),
                ('people_sqm', models.FloatField(blank=True, help_text='Area of the space defined by the geometry that is inhabitable and assigned for stationary activities.', null=True)),
                ('typology', models.CharField(blank=True, help_text='Typology of the space defined within the area geometry', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LocationLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
                ('date_measured', models.DateField(help_text='Date that the location_line attributes were measured.')),
                ('total_m', models.FloatField(blank=True, help_text='Total width of the street/space that the line geometry intersects.', null=True)),
                ('pedestrian_m', models.FloatField(blank=True, help_text='Width of the pedestrian area on the street/space that the line geometry intersects.', null=True)),
                ('bicycle_m', models.FloatField(blank=True, help_text='Width of the bicycle area that the line geometry intersects.', null=True)),
                ('vehicular_m', models.FloatField(blank=True, help_text='Width of the vehicular area that the line geometry intersects.', null=True)),
                ('typology_pedestrian', models.CharField(blank=True, help_text='Typology of the space assigned for pedestrians that the line geometry intersects.', max_length=255)),
                ('typology_bicycle', models.CharField(blank=True, help_text='Typology of the space assigned for bicycles that the line geometry intersects.', max_length=255)),
                ('typology_vehicular', models.CharField(blank=True, help_text='Typology of the space assigned for vehicles that the line geometry intersects.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='Title or name of the study as given by the conducting agency.', max_length=1000)),
                ('project', models.CharField(blank=True, help_text='Title or name of the project that the study is part of. Leave blank if the study is not linked to any other project.', max_length=1000)),
                ('project_phase', models.CharField(blank=True, help_text='Project phase or stage at the time of the study. Leave blank if the study is not linked ot any other project.', max_length=100)),
                ('start_date', models.DateField(blank=True, help_text='Date of the first survey taking place within a study.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of the last survey taking place within a study', null=True)),
                ('scale', models.CharField(blank=True, choices=[('district', 'District'), ('city', 'City'), ('city center', 'City center'), ('neighborhood', 'Neighborhood'), ('block scale', 'Block scale'), ('single site', 'Single site')], help_text='Approximate scale of the entire study area, irregardless of the amount of survey locations within that study area.', max_length=12)),
                ('manager_name', models.CharField(help_text='Name of the person in charge of the study', max_length=1000)),
                ('manager_email', models.EmailField(blank=True, help_text='Direct email to the person in charge of the study', max_length=254, null=True)),
                ('protocol_version', models.CharField(default='1.0', help_text='Version of the Public Life Data Protocol that the study is written in.', max_length=5)),
                ('notes', models.TextField(blank=True, help_text='Notes that regard the entirety of the study.', null=True)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Agency')),
            ],
        ),
        migrations.CreateModel(
            name='StudyArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the study area', max_length=1000)),
                ('area', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_start', models.DateTimeField(blank=True, help_text='Exact date and time that the survey count started', null=True)),
                ('time_stop', models.DateTimeField(blank=True, help_text='Exact date and time that the survey count stopped. Surveys of moving people should be no less than 10 minutes in length. Surveys of stationary people should be snapshots in time.', null=True)),
                ('time_character', models.CharField(blank=True, help_text='Indicate if anything out of the ordinary took place at the specific time of the survey count string that may have impacted the results.', max_length=255)),
                ('representation', models.CharField(blank=True, choices=[('absolute', 'Absolute'), ('relative', 'Relative')], help_text='Indicate whether the data collected a total of the people present within the survey count time or a representative sample', max_length=8)),
                ('microclimate', models.CharField(blank=True, help_text='Perceived weather condition on the specific survey location.', max_length=255)),
                ('temperature_c', models.IntegerField(blank=True, help_text='Official temperature measured in the survey location at the time of the survey count.', null=True)),
                ('method', models.CharField(choices=[('analog', 'Analog'), ('video', 'Video'), ('motion sensor', 'Motion sensor'), ('pressure sensor', 'Pressure sensor'), ('Wi-Fi signal', 'Wi-Fi signal'), ('GPS', 'GPS'), ('radar', 'Radar'), ('cell tower', 'Cell tower'), ('digital application', 'Digital application'), ('drone', 'Drone'), ('road tubes', 'Road tubes')], help_text='Description of the survey count method', max_length=20)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Location')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Study')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyComponentActivities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('posture', models.CharField(blank=True, help_text='Observed or reported activities', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people engaging in the specified activity.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentAge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('age', models.CharField(blank=True, help_text='Observed or reported age', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people of the specified age.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentGender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('gender', models.CharField(blank=True, help_text='Observed or reported gender', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people of the specified gender.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('group', models.CharField(blank=True, help_text='Observed or reported size of group', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of groups of the specified size.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('mode', models.CharField(blank=True, help_text='Observed or reported mode of transportation', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people using the specified mode of transportation.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentObjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('object', models.CharField(blank=True, help_text='Observed or reported objects or animals carried', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people carrying the specified object or animal.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyComponentPosture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_level', models.CharField(choices=[('basic', 'Basic choices'), ('detailed', 'Detailed choices'), ('complex', 'Complex choices')], default='basic', help_text='The level of detail that we expect in the responses', max_length=255)),
                ('posture', models.CharField(blank=True, help_text='Observed or reported physical posture', max_length=255)),
                ('count', models.IntegerField(default=1, help_text='Count the number of people in the specified posture.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyRow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.IntegerField(default=1, help_text='Indicate the number of people counted within the row. This field is not an ID, but it should be included with every survey.')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey')),
            ],
        ),
        migrations.AddField(
            model_name='surveycomponentposture',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentposture',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentobjects',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentobjects',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentmode',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentmode',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentgroups',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentgroups',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentgender',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentgender',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentage',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentage',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='surveycomponentactivities',
            name='row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.SurveyRow'),
        ),
        migrations.AddField(
            model_name='surveycomponentactivities',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pldp.Survey'),
        ),
        migrations.AddField(
            model_name='study',
            name='areas',
            field=models.ManyToManyField(help_text='Area geometries for surveys bundles together within one larger study. Leave blank if no such sub-division is necessary.', to='pldp.StudyArea'),
        ),
        migrations.AddField(
            model_name='location',
            name='area',
            field=models.ForeignKey(blank=True, help_text='Polygon that describes the geometry of the location', null=True, on_delete=django.db.models.deletion.CASCADE, to='pldp.LocationArea'),
        ),
        migrations.AddField(
            model_name='location',
            name='country',
            field=models.ForeignKey(help_text='Country that the survey location is based within.', on_delete=django.db.models.deletion.CASCADE, to='countries_plus.Country'),
        ),
        migrations.AddField(
            model_name='location',
            name='line',
            field=models.ForeignKey(blank=True, help_text='Line that describes the geometry of the location', null=True, on_delete=django.db.models.deletion.CASCADE, to='pldp.LocationLine'),
        ),
    ]
