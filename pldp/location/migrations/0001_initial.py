# Generated by Django 2.1.5 on 2019-02-12 14:23

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('agency', '0001_initial'),
        ('countries_plus', '0005_auto_20160224_1804'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('region', models.CharField(blank=True, help_text='State, county, or municipal boundary of the location.', max_length=1000, null=True)),
                ('city', models.CharField(blank=True, help_text='Name of the city that the survey location is based within. Leave blank if the survey location is not based within a city.', max_length=1000, null=True)),
                ('type', models.CharField(blank=True, choices=[('line', 'line'), ('area', 'area')], help_text='Indication of whether the location is intended for counts of people moving (across a line), or whether it is intended for counts of people staying (within an area).', max_length=4, null=True)),
                ('primary_name', models.CharField(help_text='Official, specific name of the survey location.', max_length=1000)),
                ('secondary_name', models.CharField(blank=True, help_text='Secondary or specifying name of the survey location. Leave blank if no specification is necessary.', max_length=1000, null=True)),
                ('subdivision', models.CharField(blank=True, choices=[('north', 'north'), ('northeast', 'northeast'), ('east', 'east'), ('southeast', 'southeast'), ('south', 'south'), ('southwest', 'southwest'), ('west', 'west'), ('northwest', 'northwest'), ('center', 'center')], help_text='Line Geometry: indication of whether the line is a subdivision of a single survey location. Area Geometry: indication of whether an area is a subdivision of a single survey location.', max_length=9, null=True)),
                ('character', models.CharField(blank=True, choices=[('commercial', 'Commercial'), ('cbd', 'Central business district'), ('civic', 'Civic'), ('cultural', 'Cultural'), ('educational', 'Educational'), ('industrial', 'Industrial'), ('infrastructural', 'Infrastructural'), ('medical', 'Medical'), ('mixed', 'Mixed'), ('office', 'Office'), ('recreational', 'Recreational'), ('residential', 'Residential'), ('rural', 'Rural'), ('stadium', 'Stadium')], help_text="Primary character of the survey location's immediate surroundings.", max_length=15, null=True)),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agency.Agency')),
            ],
        ),
        migrations.CreateModel(
            name='LocationArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('date_measured', models.DateField(help_text='Date that the location_area attributes were measured.')),
                ('total_sqm', models.FloatField(blank=True, help_text='Total area of the space defined by the area geometry', null=True)),
                ('people_sqm', models.FloatField(blank=True, help_text='Area of the space defined by the geometry that is inhabitable and assigned for stationary activities.', null=True)),
                ('typology', models.CharField(blank=True, help_text='Typology of the space defined within the area geometry', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocationLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
                ('date_measured', models.DateField(help_text='Date that the location_line attributes were measured.')),
                ('total_m', models.FloatField(blank=True, help_text='Total width of the street/space that the line geometry intersects.', null=True)),
                ('pedestrian_m', models.FloatField(blank=True, help_text='Width of the pedestrian area on the street/space that the line geometry intersects.', null=True)),
                ('bicycle_m', models.FloatField(blank=True, help_text='Width of the bicycle area that the line geometry intersects.', null=True)),
                ('vehicular_m', models.FloatField(blank=True, help_text='Width of the vehicular area that the line geometry intersects.', null=True)),
                ('typology_pedestrian', models.CharField(blank=True, help_text='Typology of the space assigned for pedestrians that the line geometry intersects.', max_length=255, null=True)),
                ('typology_bicycle', models.CharField(blank=True, help_text='Typology of the space assigned for bicycles that the line geometry intersects.', max_length=255, null=True)),
                ('typology_vehicular', models.CharField(blank=True, help_text='Typology of the space assigned for vehicles that the line geometry intersects.', max_length=255, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='area',
            field=models.ForeignKey(blank=True, help_text='Polygon that describes the geometry of the location', null=True, on_delete=django.db.models.deletion.CASCADE, to='location.LocationArea'),
        ),
        migrations.AddField(
            model_name='location',
            name='country',
            field=models.ForeignKey(help_text='Country that the survey location is based within.', on_delete=django.db.models.deletion.CASCADE, to='countries_plus.Country'),
        ),
        migrations.AddField(
            model_name='location',
            name='line',
            field=models.ForeignKey(blank=True, help_text='Line that describes the geometry of the location', null=True, on_delete=django.db.models.deletion.CASCADE, to='location.LocationLine'),
        ),
    ]
